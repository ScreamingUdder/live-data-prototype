import unittest
from mock import patch
import numpy as np
from flat_buf.FlatbufEventData import *
from flat_buf.flat_buffers_utils import FlatBuffersUtils

class TestFlatBuffersUtils(unittest.TestCase):
    
    def setUp(self):
	# The time of flights generated by the bragg_peak_event_generator are floats
	# The flat buffer schema use ints, so the floats are truncated.
	self.event_data = np.array([(1, 11.5), (2, 12.5), (3, 13.5), (4, 14.5)], dtype=[('detector_id', '<i4'), ('tof', '<f4')])

    def tearDown(self):
	pass

    def test_can_create_event_data_flat_buf_and_manually_retrieve_data(self):
	buf = FlatBuffersUtils.encode_event_data(self.event_data)

	raw = FlatbufEventData.GetRootAsFlatbufEventData(buf, 0)

	self.assertEquals(4, raw.Count())

	self.assertEquals(1, raw.DetId(0))
	self.assertEquals(4, raw.DetId(3))

	self.assertEquals(11, raw.Tof(0))
	self.assertEquals(14, raw.Tof(3))

    def test_can_create_event_data_flat_buf_and_retrieve_numpy_array(self):
	buf = FlatBuffersUtils.encode_event_data(self.event_data)

	ans = FlatBuffersUtils.decode_event_data(buf);

	self.assertEquals(4, len(ans))

	self.assertEquals(1, ans['detector_id'][0])
	self.assertEquals(4, ans['detector_id'][3])

	self.assertEquals(11, ans['tof'][0])
	self.assertEquals(14, ans['tof'][3])
	
	

if __name__ == '__main__':
    unittest.main()

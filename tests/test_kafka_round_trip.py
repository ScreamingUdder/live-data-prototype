import unittest
import time
from mock import patch
import numpy as np
from flat_buf.FlatbufEventData import *
from flat_buf.flat_buffers_utils import FlatBuffersUtils
from kafka import KafkaProducer, KafkaConsumer, TopicPartition

KAFKA_BROKER = '130.246.50.136:9092'

class TestFlatBuffersAndKafka(unittest.TestCase):
    
    def setUp(self):
	# The time of flights generated by the bragg_peak_event_generator are floats
	# The flat buffer schema use ints, so the floats are truncated.
	self.event_data = np.array([(1, 11.5), (2, 12.5), (3, 13.5), (4, 14.5)], dtype=[('detector_id', '<i4'), ('tof', '<f4')])

    def tearDown(self):
	pass

    def test_kafka_round_trip_returns_correct_data(self):
	buf = FlatBuffersUtils.encode_event_data(self.event_data)

	topic = TopicPartition('flat_buffers_roundtrip_stream', 0)

	producer = KafkaProducer(bootstrap_servers=[KAFKA_BROKER])
	
	# Send a message to create the topic if it does not already exist
	producer.send('flat_buffers_roundtrip_stream', bytes(buf))

	consumer = KafkaConsumer(bootstrap_servers=[KAFKA_BROKER])
	consumer.assign([topic])
	consumer.seek_to_end(topic)

	position = consumer.position(topic)

	# Send new data
	producer.send('flat_buffers_roundtrip_stream', bytes(buf))

	# Wait for it
	while True:
	    consumer.seek_to_end(topic)
	    new_pos = consumer.position(topic)
	    if new_pos > position:
		consumer.seek(topic, new_pos - 1)
		break
	    time.sleep(0.1)

	# Retreive it and test it
	msg = consumer.next()
	ans = FlatBuffersUtils.decode_event_data(msg.value);
	
	self.assertEquals(4, len(ans))

	self.assertEquals(1, ans['detector_id'][0])
	self.assertEquals(4, ans['detector_id'][3])

	self.assertEquals(11, ans['tof'][0])
	self.assertEquals(14, ans['tof'][3])
	

if __name__ == '__main__':
    unittest.main()

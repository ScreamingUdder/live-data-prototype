# automatically generated by the FlatBuffers compiler, do not modify

# namespace: EventData

import flatbuffers

class FlatbufEventData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsFlatbufEventData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = FlatbufEventData()
        x.Init(buf, n + offset)
        return x


    # FlatbufEventData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # FlatbufEventData
    def Count(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlatbufEventData
    def DetId(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # FlatbufEventData
    def DetIdLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatbufEventData
    def Tof(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # FlatbufEventData
    def TofLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # FlatbufEventData
    def FrameNumber(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

    # FlatbufEventData
    def TotalFrames(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def FlatbufEventDataStart(builder): builder.StartObject(5)
def FlatbufEventDataAddCount(builder, count): builder.PrependUint32Slot(0, count, 0)
def FlatbufEventDataAddDetId(builder, detId): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(detId), 0)
def FlatbufEventDataStartDetIdVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def FlatbufEventDataAddTof(builder, tof): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tof), 0)
def FlatbufEventDataStartTofVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def FlatbufEventDataAddFrameNumber(builder, frameNumber): builder.PrependUint32Slot(3, frameNumber, 0)
def FlatbufEventDataAddTotalFrames(builder, totalFrames): builder.PrependUint32Slot(4, totalFrames, 0)
def FlatbufEventDataEnd(builder): return builder.EndObject()
